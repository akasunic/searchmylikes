// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.


//first step: add results to storage-- for now, leaving date out, but should probably hae that


//*************LOOK INTO turning all this into background.js-- like, not the search bar part, but loading the videos. oh or like, not background.js actually-- need to load once a day and store. easier to just keep as is. background.js would still need to be loaded multiple times a day
'use strict';
var pageToken = '';
var videoArray = [];
var links;
var pos;
var totalVideos;

// Probably not with a button. Probably it just happens when you click the extension icon. And then a search bar appears. Which would mean you'd want this as a pop up.
// maybe brwoser_action is already considered a pop-up, I dunno
window.onload = function() {
//   document.querySelector('button').addEventListener('click', fetchResults(pageToken));


  chrome.storage.local.get(['videos'], function(result) {
    console.log(result.videos);
    if (result.videos == undefined){
      console.log('fetching results');
      pos = 0;
      pageToken = '&pageToken=' + pageTokens[pos];
      fetchResults(pageToken);
    }
    else{
      getStoredResults();
    }
  });


  // fetchResults(pageToken);


  document.querySelector('#refresh').addEventListener('click', function(){
    videoArray = [];
    pos = 0;
    pageToken = '&pageToken=' + pageTokens[pos];
    fetchResults(pageToken);
  });

  //execute search button click if user presses enter
  document.querySelector("#mySearchBar").addEventListener("keyup", function(event){
    if(event.keyCode === 13){
      document.querySelector('#mySearchButton').click();
    }
  });

  document.querySelector('#mySearchButton').addEventListener('click', function(){
    document.querySelector('#mySearchResults').innerHTML = '';
    var matches = 0;
    var searchCriteria = document.querySelector('#mySearchBar').value.toUpperCase().split(" ");
    // console.log("searchCriteria length: ", searchCriteria.length);
    var i;
    for (i=0; i<videoArray.length; i++){
      var wordCount = 0;
      var currentLink = videoArray[i];
      // console.log(currentLink);
      var x; var word;
      for (x = 0; x<searchCriteria.length; x++){
        word = searchCriteria[x];
        // console.log(currentLink);
        if (currentLink.title.toUpperCase().indexOf(word)>-1 || currentLink.channel.toUpperCase().indexOf(word)>-1){
          wordCount += 1;
        }
    }
    // console.log('exited word for loop');
    if (wordCount === searchCriteria.length){
      //display the link if all search criteria met
      //could change options for search if desired, but let's start with this
      //first let's just make page of links
      //then maybe add thumbnails and channel
      matches += 1;
      var div = document.createElement('div');
      div.classList.add("container2");
      var div2 = document.createElement('div');
      div2.classList.add('container3');
      var image = document.createElement('img');
      image.src = currentLink.thumbnail;
      var match = document.createElement('a');
      match.href = currentLink.link;
      match.innerHTML = currentLink.title;
      var channel = document.createElement('p');
      channel.innerHTML = currentLink.channel;
      div.appendChild(image);
      div2.appendChild(match);
      div2.appendChild(channel);
      div.appendChild(div2);
      document.querySelector('#mySearchResults').appendChild(div);
    }

  }//ends outer for loop (videoArray loop)

  if (matches == 0){
    console.log('matches: ', matches);
    document.querySelector('#mySearchResults').innerHTML = '<b>Sorry, no liked videos matched those criteria</b>';
  }

});//ends search button functionality code

}

var getNumResults = function(){
  chrome.identity.getAuthToken({interactive: true}, function(token) {
      var init = {
        method: 'GET',
        async: true,
        headers: {
          Authorization: 'Bearer ' + token,
          'Content-Type': 'application/json'
        },
        'contentType': 'json'
      };  

      fetch('https://www.googleapis.com/youtube/v3/videos?part=snippet&myRating=like', init)
      .then((response) => response.json())
          .then(function(data){
            console.log(data.pageInfo.totalResults);
            totalVideos = data.pageInfo.totalResults;

          });
   });
}




var fetchResults = function(pageToken){
  if(totalVideos==undefined){
    getNumResults();
  }
  document.querySelector('#myLoadMessage').innerHTML = "Loading your videos, this may take a moment.";
  document.querySelector("#mySearchBar").style.display = "none";
  document.querySelector("#mySearchButton").style.display = "none";


  chrome.identity.getAuthToken({interactive: true}, function(token) {
      var init = {
        method: 'GET',
        async: true,
        headers: {
          Authorization: 'Bearer ' + token,
          'Content-Type': 'application/json'
        },
        'contentType': 'json'
      };  



      fetch('https://www.googleapis.com/youtube/v3/videos?part=snippet&myRating=like&maxResults=50' + pageToken, init)
        .then((response) => response.json())
          .then(function(data){
            // console.log(data);
            //next page token, for running fetch next time
            pos += 1;
            var max;
            if (pos*50 >totalVideos){
              max = pos*50 - totalVideos + 1;
            }
            else{
              max = 50;
            }
            pageToken = '&pageToken=' + pageTokens[pos];
            // pageToken = '&pageToken=' + data.nextPageToken;
            //add each item to the video array for searching
            links = data.items;

            var i;
            for (i=0; i<max; i++){
              var link = 'https://www.youtube.com/watch?v=' + links[i]['id'];
              var snippet = links[i]['snippet'];
              var title = snippet.title;
              var channel = snippet.channelTitle;
              var thumbnail = snippet.thumbnails.default.url;
              var item = {'link': link, 'title': title, 'channel':channel, 'thumbnail': thumbnail};
              videoArray.push(item);
            }
            //WORKING PRETTY WELL BUT NEXTPAGETOKEN STOPS APPEARING AT VIDEO 989. MAY NEED A WORKAROUND!!
      // if(pageToken == '&pageToken=undefined'){ //referring to my pages, in particular
        if(videoArray.length >= totalVideos || pos >30){
        console.log(pageToken);
        console.log(links);
        // console.log('outOfPages');
        // console.log(videoArray.length);
        var today = (new Date()).toJSON();
        chrome.storage.local.set({'videos': videoArray,'date': today}, function(){
          // console.log(videoArray);
        });
        document.querySelector('#myLoadMessage').innerHTML = "Videos loaded. Search away!";
        document.querySelector("#mySearchBar").style.display = "block";
        document.querySelector("#mySearchButton").style.display = "block";
        //add Search functionality to search button now
        //searching for each word, by channel or title only


      }
      else{
        fetchResults(pageToken);
      }
           

        });//ends function using data
  
      //keep looging next page token until there are no more pages, thanks to:::
        //TRYING: https://stackoverflow.com/questions/45008330/how-can-i-use-fetch-in-while-loop
      
      

      });//ends chrome.identity statement


 }//ends fetchReults definition


var getStoredResults = function(){
    chrome.storage.local.get(['videos', 'date'], function(result) {
      videoArray = result.videos;
      var storedDate = new Date(result.date);
      console.log(storedDate);
      document.querySelector('#date').innerHTML = "This video list was last updated on " + storedDate.toLocaleDateString("en-US")  + "."; 
      document.querySelector('#myLoadMessage').innerHTML = "Videos loaded. Search away!";
      document.querySelector("#mySearchBar").style.display = "block";
      document.querySelector("#mySearchButton").style.display = "block";
    });
    
};

//the following was taken from a github, should be all the youtube page tokens up to 1000
var pageTokens = 
['CAAQAA',
'CAEQAA',
'CAIQAA',
'CAMQAA',
'CAQQAA',
'CAUQAA',
'CAYQAA',
'CAcQAA',
'CAgQAA',
'CAkQAA',
'CAoQAA',
'CAsQAA',
'CAwQAA',
'CA0QAA',
'CA4QAA',
'CA8QAA',
'CBAQAA',
'CBEQAA',
'CBIQAA',
'CBMQAA',
'CBQQAA',
'CBUQAA',
'CBYQAA',
'CBcQAA',
'CBgQAA',
'CBkQAA',
'CBoQAA',
'CBsQAA',
'CBwQAA',
'CB0QAA',
'CB4QAA',
'CB8QAA',
'CCAQAA',
'CCEQAA',
'CCIQAA',
'CCMQAA',
'CCQQAA',
'CCUQAA',
'CCYQAA',
'CCcQAA',
'CCgQAA',
'CCkQAA',
'CCoQAA',
'CCsQAA',
'CCwQAA',
'CC0QAA',
'CC4QAA',
'CC8QAA',
'CDAQAA',
'CDEQAA',
'CDIQAA',
'CDMQAA',
'CDQQAA',
'CDUQAA',
'CDYQAA',
'CDcQAA',
'CDgQAA',
'CDkQAA',
'CDoQAA',
'CDsQAA',
'CDwQAA',
'CD0QAA',
'CD4QAA',
'CD8QAA',
'CEAQAA',
'CEEQAA',
'CEIQAA',
'CEMQAA',
'CEQQAA',
'CEUQAA',
'CEYQAA',
'CEcQAA',
'CEgQAA',
'CEkQAA',
'CEoQAA',
'CEsQAA',
'CEwQAA',
'CE0QAA',
'CE4QAA',
'CE8QAA',
'CFAQAA',
'CFEQAA',
'CFIQAA',
'CFMQAA',
'CFQQAA',
'CFUQAA',
'CFYQAA',
'CFcQAA',
'CFgQAA',
'CFkQAA',
'CFoQAA',
'CFsQAA',
'CFwQAA',
'CF0QAA',
'CF4QAA',
'CF8QAA',
'CGAQAA',
'CGEQAA',
'CGIQAA',
'CGMQAA',
'CGQQAA',
'CGUQAA',
'CGYQAA',
'CGcQAA',
'CGgQAA',
'CGkQAA',
'CGoQAA',
'CGsQAA',
'CGwQAA',
'CG0QAA',
'CG4QAA',
'CG8QAA',
'CHAQAA',
'CHEQAA',
'CHIQAA',
'CHMQAA',
'CHQQAA',
'CHUQAA',
'CHYQAA',
'CHcQAA',
'CHgQAA',
'CHkQAA',
'CHoQAA',
'CHsQAA',
'CHwQAA',
'CH0QAA',
'CH4QAA',
'CH8QAA',
'CIABEAA',
'CIEBEAA',
'CIIBEAA',
'CIMBEAA',
'CIQBEAA',
'CIUBEAA',
'CIYBEAA',
'CIcBEAA',
'CIgBEAA',
'CIkBEAA',
'CIoBEAA',
'CIsBEAA',
'CIwBEAA',
'CI0BEAA',
'CI4BEAA',
'CI8BEAA',
'CJABEAA',
'CJEBEAA',
'CJIBEAA',
'CJMBEAA',
'CJQBEAA',
'CJUBEAA',
'CJYBEAA',
'CJcBEAA',
'CJgBEAA',
'CJkBEAA',
'CJoBEAA',
'CJsBEAA',
'CJwBEAA',
'CJ0BEAA',
'CJ4BEAA',
'CJ8BEAA',
'CKABEAA',
'CKEBEAA',
'CKIBEAA',
'CKMBEAA',
'CKQBEAA',
'CKUBEAA',
'CKYBEAA',
'CKcBEAA',
'CKgBEAA',
'CKkBEAA',
'CKoBEAA',
'CKsBEAA',
'CKwBEAA',
'CK0BEAA',
'CK4BEAA',
'CK8BEAA',
'CLABEAA',
'CLEBEAA',
'CLIBEAA',
'CLMBEAA',
'CLQBEAA',
'CLUBEAA',
'CLYBEAA',
'CLcBEAA',
'CLgBEAA',
'CLkBEAA',
'CLoBEAA',
'CLsBEAA',
'CLwBEAA',
'CL0BEAA',
'CL4BEAA',
'CL8BEAA',
'CMABEAA',
'CMEBEAA',
'CMIBEAA',
'CMMBEAA',
'CMQBEAA',
'CMUBEAA',
'CMYBEAA',
'CMcBEAA',
'CMgBEAA',
'CMkBEAA',
'CMoBEAA',
'CMsBEAA',
'CMwBEAA',
'CM0BEAA',
'CM4BEAA',
'CM8BEAA',
'CNABEAA',
'CNEBEAA',
'CNIBEAA',
'CNMBEAA',
'CNQBEAA',
'CNUBEAA',
'CNYBEAA',
'CNcBEAA',
'CNgBEAA',
'CNkBEAA',
'CNoBEAA',
'CNsBEAA',
'CNwBEAA',
'CN0BEAA',
'CN4BEAA',
'CN8BEAA',
'COABEAA',
'COEBEAA',
'COIBEAA',
'COMBEAA',
'COQBEAA',
'COUBEAA',
'COYBEAA',
'COcBEAA',
'COgBEAA',
'COkBEAA',
'COoBEAA',
'COsBEAA',
'COwBEAA',
'CO0BEAA',
'CO4BEAA',
'CO8BEAA',
'CPABEAA',
'CPEBEAA',
'CPIBEAA',
'CPMBEAA',
'CPQBEAA',
'CPUBEAA',
'CPYBEAA',
'CPcBEAA',
'CPgBEAA',
'CPkBEAA',
'CPoBEAA',
'CPsBEAA',
'CPwBEAA',
'CP0BEAA',
'CP4BEAA',
'CP8BEAA',
'CIACEAA',
'CIECEAA',
'CIICEAA',
'CIMCEAA',
'CIQCEAA',
'CIUCEAA',
'CIYCEAA',
'CIcCEAA',
'CIgCEAA',
'CIkCEAA',
'CIoCEAA',
'CIsCEAA',
'CIwCEAA',
'CI0CEAA',
'CI4CEAA',
'CI8CEAA',
'CJACEAA',
'CJECEAA',
'CJICEAA',
'CJMCEAA',
'CJQCEAA',
'CJUCEAA',
'CJYCEAA',
'CJcCEAA',
'CJgCEAA',
'CJkCEAA',
'CJoCEAA',
'CJsCEAA',
'CJwCEAA',
'CJ0CEAA',
'CJ4CEAA',
'CJ8CEAA',
'CKACEAA',
'CKECEAA',
'CKICEAA',
'CKMCEAA',
'CKQCEAA',
'CKUCEAA',
'CKYCEAA',
'CKcCEAA',
'CKgCEAA',
'CKkCEAA',
'CKoCEAA',
'CKsCEAA',
'CKwCEAA',
'CK0CEAA',
'CK4CEAA',
'CK8CEAA',
'CLACEAA',
'CLECEAA',
'CLICEAA',
'CLMCEAA',
'CLQCEAA',
'CLUCEAA',
'CLYCEAA',
'CLcCEAA',
'CLgCEAA',
'CLkCEAA',
'CLoCEAA',
'CLsCEAA',
'CLwCEAA',
'CL0CEAA',
'CL4CEAA',
'CL8CEAA',
'CMACEAA',
'CMECEAA',
'CMICEAA',
'CMMCEAA',
'CMQCEAA',
'CMUCEAA',
'CMYCEAA',
'CMcCEAA',
'CMgCEAA',
'CMkCEAA',
'CMoCEAA',
'CMsCEAA',
'CMwCEAA',
'CM0CEAA',
'CM4CEAA',
'CM8CEAA',
'CNACEAA',
'CNECEAA',
'CNICEAA',
'CNMCEAA',
'CNQCEAA',
'CNUCEAA',
'CNYCEAA',
'CNcCEAA',
'CNgCEAA',
'CNkCEAA',
'CNoCEAA',
'CNsCEAA',
'CNwCEAA',
'CN0CEAA',
'CN4CEAA',
'CN8CEAA',
'COACEAA',
'COECEAA',
'COICEAA',
'COMCEAA',
'COQCEAA',
'COUCEAA',
'COYCEAA',
'COcCEAA',
'COgCEAA',
'COkCEAA',
'COoCEAA',
'COsCEAA',
'COwCEAA',
'CO0CEAA',
'CO4CEAA',
'CO8CEAA',
'CPACEAA',
'CPECEAA',
'CPICEAA',
'CPMCEAA',
'CPQCEAA',
'CPUCEAA',
'CPYCEAA',
'CPcCEAA',
'CPgCEAA',
'CPkCEAA',
'CPoCEAA',
'CPsCEAA',
'CPwCEAA',
'CP0CEAA',
'CP4CEAA',
'CP8CEAA',
'CIADEAA',
'CIEDEAA',
'CIIDEAA',
'CIMDEAA',
'CIQDEAA',
'CIUDEAA',
'CIYDEAA',
'CIcDEAA',
'CIgDEAA',
'CIkDEAA',
'CIoDEAA',
'CIsDEAA',
'CIwDEAA',
'CI0DEAA',
'CI4DEAA',
'CI8DEAA',
'CJADEAA',
'CJEDEAA',
'CJIDEAA',
'CJMDEAA',
'CJQDEAA',
'CJUDEAA',
'CJYDEAA',
'CJcDEAA',
'CJgDEAA',
'CJkDEAA',
'CJoDEAA',
'CJsDEAA',
'CJwDEAA',
'CJ0DEAA',
'CJ4DEAA',
'CJ8DEAA',
'CKADEAA',
'CKEDEAA',
'CKIDEAA',
'CKMDEAA',
'CKQDEAA',
'CKUDEAA',
'CKYDEAA',
'CKcDEAA',
'CKgDEAA',
'CKkDEAA',
'CKoDEAA',
'CKsDEAA',
'CKwDEAA',
'CK0DEAA',
'CK4DEAA',
'CK8DEAA',
'CLADEAA',
'CLEDEAA',
'CLIDEAA',
'CLMDEAA',
'CLQDEAA',
'CLUDEAA',
'CLYDEAA',
'CLcDEAA',
'CLgDEAA',
'CLkDEAA',
'CLoDEAA',
'CLsDEAA',
'CLwDEAA',
'CL0DEAA',
'CL4DEAA',
'CL8DEAA',
'CMADEAA',
'CMEDEAA',
'CMIDEAA',
'CMMDEAA',
'CMQDEAA',
'CMUDEAA',
'CMYDEAA',
'CMcDEAA',
'CMgDEAA',
'CMkDEAA',
'CMoDEAA',
'CMsDEAA',
'CMwDEAA',
'CM0DEAA',
'CM4DEAA',
'CM8DEAA',
'CNADEAA',
'CNEDEAA',
'CNIDEAA',
'CNMDEAA',
'CNQDEAA',
'CNUDEAA',
'CNYDEAA',
'CNcDEAA',
'CNgDEAA',
'CNkDEAA',
'CNoDEAA',
'CNsDEAA',
'CNwDEAA',
'CN0DEAA',
'CN4DEAA',
'CN8DEAA',
'COADEAA',
'COEDEAA',
'COIDEAA',
'COMDEAA',
'COQDEAA',
'COUDEAA',
'COYDEAA',
'COcDEAA',
'COgDEAA',
'COkDEAA',
'COoDEAA',
'COsDEAA',
'COwDEAA',
'CO0DEAA',
'CO4DEAA',
'CO8DEAA',
'CPADEAA',
'CPEDEAA',
'CPIDEAA',
'CPMDEAA',
'CPQDEAA',
'CPUDEAA',
'CPYDEAA',
'CPcDEAA',
'CPgDEAA',
'CPkDEAA',
'CPoDEAA',
'CPsDEAA',
'CPwDEAA',
'CP0DEAA',
'CP4DEAA',
'CP8DEAA',
'CIAEEAA',
'CIEEEAA',
'CIIEEAA',
'CIMEEAA',
'CIQEEAA',
'CIUEEAA',
'CIYEEAA',
'CIcEEAA',
'CIgEEAA',
'CIkEEAA',
'CIoEEAA',
'CIsEEAA',
'CIwEEAA',
'CI0EEAA',
'CI4EEAA',
'CI8EEAA',
'CJAEEAA',
'CJEEEAA',
'CJIEEAA',
'CJMEEAA',
'CJQEEAA',
'CJUEEAA',
'CJYEEAA',
'CJcEEAA',
'CJgEEAA',
'CJkEEAA',
'CJoEEAA',
'CJsEEAA',
'CJwEEAA',
'CJ0EEAA',
'CJ4EEAA',
'CJ8EEAA',
'CKAEEAA',
'CKEEEAA',
'CKIEEAA',
'CKMEEAA',
'CKQEEAA',
'CKUEEAA',
'CKYEEAA',
'CKcEEAA',
'CKgEEAA',
'CKkEEAA',
'CKoEEAA',
'CKsEEAA',
'CKwEEAA',
'CK0EEAA',
'CK4EEAA',
'CK8EEAA',
'CLAEEAA',
'CLEEEAA',
'CLIEEAA',
'CLMEEAA',
'CLQEEAA',
'CLUEEAA',
'CLYEEAA',
'CLcEEAA',
'CLgEEAA',
'CLkEEAA',
'CLoEEAA',
'CLsEEAA',
'CLwEEAA',
'CL0EEAA',
'CL4EEAA',
'CL8EEAA',
'CMAEEAA',
'CMEEEAA',
'CMIEEAA',
'CMMEEAA',
'CMQEEAA',
'CMUEEAA',
'CMYEEAA',
'CMcEEAA',
'CMgEEAA',
'CMkEEAA',
'CMoEEAA',
'CMsEEAA',
'CMwEEAA',
'CM0EEAA',
'CM4EEAA',
'CM8EEAA',
'CNAEEAA',
'CNEEEAA',
'CNIEEAA',
'CNMEEAA',
'CNQEEAA',
'CNUEEAA',
'CNYEEAA',
'CNcEEAA',
'CNgEEAA',
'CNkEEAA',
'CNoEEAA',
'CNsEEAA',
'CNwEEAA',
'CN0EEAA',
'CN4EEAA',
'CN8EEAA',
'COAEEAA',
'COEEEAA',
'COIEEAA',
'COMEEAA',
'COQEEAA',
'COUEEAA',
'COYEEAA',
'COcEEAA',
'COgEEAA',
'COkEEAA',
'COoEEAA',
'COsEEAA',
'COwEEAA',
'CO0EEAA',
'CO4EEAA',
'CO8EEAA',
'CPAEEAA',
'CPEEEAA',
'CPIEEAA',
'CPMEEAA',
'CPQEEAA',
'CPUEEAA',
'CPYEEAA',
'CPcEEAA',
'CPgEEAA',
'CPkEEAA',
'CPoEEAA',
'CPsEEAA',
'CPwEEAA',
'CP0EEAA',
'CP4EEAA',
'CP8EEAA',
'CIAFEAA',
'CIEFEAA',
'CIIFEAA',
'CIMFEAA',
'CIQFEAA',
'CIUFEAA',
'CIYFEAA',
'CIcFEAA',
'CIgFEAA',
'CIkFEAA',
'CIoFEAA',
'CIsFEAA',
'CIwFEAA',
'CI0FEAA',
'CI4FEAA',
'CI8FEAA',
'CJAFEAA',
'CJEFEAA',
'CJIFEAA',
'CJMFEAA',
'CJQFEAA',
'CJUFEAA',
'CJYFEAA',
'CJcFEAA',
'CJgFEAA',
'CJkFEAA',
'CJoFEAA',
'CJsFEAA',
'CJwFEAA',
'CJ0FEAA',
'CJ4FEAA',
'CJ8FEAA',
'CKAFEAA',
'CKEFEAA',
'CKIFEAA',
'CKMFEAA',
'CKQFEAA',
'CKUFEAA',
'CKYFEAA',
'CKcFEAA',
'CKgFEAA',
'CKkFEAA',
'CKoFEAA',
'CKsFEAA',
'CKwFEAA',
'CK0FEAA',
'CK4FEAA',
'CK8FEAA',
'CLAFEAA',
'CLEFEAA',
'CLIFEAA',
'CLMFEAA',
'CLQFEAA',
'CLUFEAA',
'CLYFEAA',
'CLcFEAA',
'CLgFEAA',
'CLkFEAA',
'CLoFEAA',
'CLsFEAA',
'CLwFEAA',
'CL0FEAA',
'CL4FEAA',
'CL8FEAA',
'CMAFEAA',
'CMEFEAA',
'CMIFEAA',
'CMMFEAA',
'CMQFEAA',
'CMUFEAA',
'CMYFEAA',
'CMcFEAA',
'CMgFEAA',
'CMkFEAA',
'CMoFEAA',
'CMsFEAA',
'CMwFEAA',
'CM0FEAA',
'CM4FEAA',
'CM8FEAA',
'CNAFEAA',
'CNEFEAA',
'CNIFEAA',
'CNMFEAA',
'CNQFEAA',
'CNUFEAA',
'CNYFEAA',
'CNcFEAA',
'CNgFEAA',
'CNkFEAA',
'CNoFEAA',
'CNsFEAA',
'CNwFEAA',
'CN0FEAA',
'CN4FEAA',
'CN8FEAA',
'COAFEAA',
'COEFEAA',
'COIFEAA',
'COMFEAA',
'COQFEAA',
'COUFEAA',
'COYFEAA',
'COcFEAA',
'COgFEAA',
'COkFEAA',
'COoFEAA',
'COsFEAA',
'COwFEAA',
'CO0FEAA',
'CO4FEAA',
'CO8FEAA',
'CPAFEAA',
'CPEFEAA',
'CPIFEAA',
'CPMFEAA',
'CPQFEAA',
'CPUFEAA',
'CPYFEAA',
'CPcFEAA',
'CPgFEAA',
'CPkFEAA',
'CPoFEAA',
'CPsFEAA',
'CPwFEAA',
'CP0FEAA',
'CP4FEAA',
'CP8FEAA',
'CIAGEAA',
'CIEGEAA',
'CIIGEAA',
'CIMGEAA',
'CIQGEAA',
'CIUGEAA',
'CIYGEAA',
'CIcGEAA',
'CIgGEAA',
'CIkGEAA',
'CIoGEAA',
'CIsGEAA',
'CIwGEAA',
'CI0GEAA',
'CI4GEAA',
'CI8GEAA',
'CJAGEAA',
'CJEGEAA',
'CJIGEAA',
'CJMGEAA',
'CJQGEAA',
'CJUGEAA',
'CJYGEAA',
'CJcGEAA',
'CJgGEAA',
'CJkGEAA',
'CJoGEAA',
'CJsGEAA',
'CJwGEAA',
'CJ0GEAA',
'CJ4GEAA',
'CJ8GEAA',
'CKAGEAA',
'CKEGEAA',
'CKIGEAA',
'CKMGEAA',
'CKQGEAA',
'CKUGEAA',
'CKYGEAA',
'CKcGEAA',
'CKgGEAA',
'CKkGEAA',
'CKoGEAA',
'CKsGEAA',
'CKwGEAA',
'CK0GEAA',
'CK4GEAA',
'CK8GEAA',
'CLAGEAA',
'CLEGEAA',
'CLIGEAA',
'CLMGEAA',
'CLQGEAA',
'CLUGEAA',
'CLYGEAA',
'CLcGEAA',
'CLgGEAA',
'CLkGEAA',
'CLoGEAA',
'CLsGEAA',
'CLwGEAA',
'CL0GEAA',
'CL4GEAA',
'CL8GEAA',
'CMAGEAA',
'CMEGEAA',
'CMIGEAA',
'CMMGEAA',
'CMQGEAA',
'CMUGEAA',
'CMYGEAA',
'CMcGEAA',
'CMgGEAA',
'CMkGEAA',
'CMoGEAA',
'CMsGEAA',
'CMwGEAA',
'CM0GEAA',
'CM4GEAA',
'CM8GEAA',
'CNAGEAA',
'CNEGEAA',
'CNIGEAA',
'CNMGEAA',
'CNQGEAA',
'CNUGEAA',
'CNYGEAA',
'CNcGEAA',
'CNgGEAA',
'CNkGEAA',
'CNoGEAA',
'CNsGEAA',
'CNwGEAA',
'CN0GEAA',
'CN4GEAA',
'CN8GEAA',
'COAGEAA',
'COEGEAA',
'COIGEAA',
'COMGEAA',
'COQGEAA',
'COUGEAA',
'COYGEAA',
'COcGEAA',
'COgGEAA',
'COkGEAA',
'COoGEAA',
'COsGEAA',
'COwGEAA',
'CO0GEAA',
'CO4GEAA',
'CO8GEAA',
'CPAGEAA',
'CPEGEAA',
'CPIGEAA',
'CPMGEAA',
'CPQGEAA',
'CPUGEAA',
'CPYGEAA',
'CPcGEAA',
'CPgGEAA',
'CPkGEAA',
'CPoGEAA',
'CPsGEAA',
'CPwGEAA',
'CP0GEAA',
'CP4GEAA',
'CP8GEAA',
'CIAHEAA',
'CIEHEAA',
'CIIHEAA',
'CIMHEAA',
'CIQHEAA',
'CIUHEAA',
'CIYHEAA',
'CIcHEAA',
'CIgHEAA',
'CIkHEAA',
'CIoHEAA',
'CIsHEAA',
'CIwHEAA',
'CI0HEAA',
'CI4HEAA',
'CI8HEAA',
'CJAHEAA',
'CJEHEAA',
'CJIHEAA',
'CJMHEAA',
'CJQHEAA',
'CJUHEAA',
'CJYHEAA',
'CJcHEAA',
'CJgHEAA',
'CJkHEAA',
'CJoHEAA',
'CJsHEAA',
'CJwHEAA',
'CJ0HEAA',
'CJ4HEAA',
'CJ8HEAA',
'CKAHEAA',
'CKEHEAA',
'CKIHEAA',
'CKMHEAA',
'CKQHEAA',
'CKUHEAA',
'CKYHEAA',
'CKcHEAA',
'CKgHEAA',
'CKkHEAA',
'CKoHEAA',
'CKsHEAA',
'CKwHEAA',
'CK0HEAA',
'CK4HEAA',
'CK8HEAA',
'CLAHEAA',
'CLEHEAA',
'CLIHEAA',
'CLMHEAA',
'CLQHEAA',
'CLUHEAA',
'CLYHEAA',
'CLcHEAA',
'CLgHEAA',
'CLkHEAA',
'CLoHEAA',
'CLsHEAA',
'CLwHEAA',
'CL0HEAA',
'CL4HEAA',
'CL8HEAA',
'CMAHEAA',
'CMEHEAA',
'CMIHEAA',
'CMMHEAA',
'CMQHEAA',
'CMUHEAA',
'CMYHEAA',
'CMcHEAA',
'CMgHEAA',
'CMkHEAA',
'CMoHEAA',
'CMsHEAA',
'CMwHEAA',
'CM0HEAA',
'CM4HEAA',
'CM8HEAA',
'CNAHEAA',
'CNEHEAA',
'CNIHEAA',
'CNMHEAA',
'CNQHEAA',
'CNUHEAA',
'CNYHEAA',
'CNcHEAA',
'CNgHEAA',
'CNkHEAA',
'CNoHEAA',
'CNsHEAA',
'CNwHEAA',
'CN0HEAA',
'CN4HEAA',
'CN8HEAA',
'COAHEAA',
'COEHEAA',
'COIHEAA',
'COMHEAA',
'COQHEAA',
'COUHEAA',
'COYHEAA',
'COcHEAA'];

